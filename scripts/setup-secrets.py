#!/usr/bin/env python3
"""
Interactive script to securely set up environment variables for Astrabot.
"""

import os
import sys
from pathlib import Path
import getpass
from typing import Optional

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

ENV_FILE = Path(__file__).parent.parent / '.env'
ENV_EXAMPLE = Path(__file__).parent.parent / '.env.example'


def get_secure_input(prompt: str, is_password: bool = True) -> str:
    """Get input from user, hiding password fields."""
    if is_password:
        return getpass.getpass(prompt)
    else:
        return input(prompt)


def read_env_file(filepath: Path) -> dict:
    """Read existing .env file into a dictionary."""
    env_vars = {}
    if filepath.exists():
        with open(filepath, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
    return env_vars


def write_env_file(filepath: Path, env_vars: dict):
    """Write environment variables to .env file."""
    with open(filepath, 'w') as f:
        f.write("# Astrabot Environment Variables\n")
        f.write("# Generated by setup-secrets.py\n")
        f.write("# KEEP THIS FILE SECRET - NEVER COMMIT TO GIT!\n\n")
        
        # API Keys section
        f.write("# API Keys\n")
        for key in ['OPENAI_API_KEY', 'ANTHROPIC_API_KEY']:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        f.write("\n")
        
        # Other settings
        f.write("# Settings\n")
        for key, value in env_vars.items():
            if key not in ['OPENAI_API_KEY', 'ANTHROPIC_API_KEY']:
                f.write(f"{key}={value}\n")


def main():
    print("üîê Astrabot Secrets Setup")
    print("=" * 40)
    
    # Check if .env already exists
    existing_vars = {}
    if ENV_FILE.exists():
        print(f"‚ÑπÔ∏è  Found existing .env file at {ENV_FILE}")
        existing_vars = read_env_file(ENV_FILE)
        
        overwrite = input("Do you want to update it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Cancelled.")
            return
    
    # Load defaults from .env.example
    defaults = {}
    if ENV_EXAMPLE.exists():
        defaults = read_env_file(ENV_EXAMPLE)
    
    # Merge existing vars with defaults
    env_vars = {**defaults, **existing_vars}
    
    print("\nüìù Configure your environment variables:")
    print("(Press Enter to keep existing values)")
    print()
    
    # API Keys (sensitive)
    print("üîë API Keys (will be hidden):")
    
    # OpenAI
    current_openai = "configured" if env_vars.get('OPENAI_API_KEY') and env_vars['OPENAI_API_KEY'] != 'your-openai-api-key-here' else "not set"
    print(f"\nOpenAI API Key (currently: {current_openai})")
    new_openai = get_secure_input("Enter new OpenAI API key (or press Enter to skip): ")
    if new_openai:
        env_vars['OPENAI_API_KEY'] = new_openai
    
    # Anthropic
    current_anthropic = "configured" if env_vars.get('ANTHROPIC_API_KEY') and env_vars['ANTHROPIC_API_KEY'] != 'your-anthropic-api-key-here' else "not set"
    print(f"\nAnthropic API Key (currently: {current_anthropic})")
    new_anthropic = get_secure_input("Enter new Anthropic API key (or press Enter to skip): ")
    if new_anthropic:
        env_vars['ANTHROPIC_API_KEY'] = new_anthropic
    
    # Non-sensitive settings
    print("\n‚öôÔ∏è  Other Settings:")
    
    # Your recipient ID
    current_id = env_vars.get('YOUR_RECIPIENT_ID', '2')
    new_id = get_secure_input(f"Your Signal recipient ID (current: {current_id}): ", is_password=False)
    if new_id:
        env_vars['YOUR_RECIPIENT_ID'] = new_id
    
    # Debug mode
    current_debug = env_vars.get('DEBUG', 'false')
    new_debug = get_secure_input(f"Enable debug mode? true/false (current: {current_debug}): ", is_password=False)
    if new_debug:
        env_vars['DEBUG'] = new_debug.lower()
    
    # Feature flags
    print("\nüöÄ Feature Flags:")
    
    current_img = env_vars.get('ENABLE_IMAGE_PROCESSING', 'true')
    new_img = get_secure_input(f"Enable image processing? true/false (current: {current_img}): ", is_password=False)
    if new_img:
        env_vars['ENABLE_IMAGE_PROCESSING'] = new_img.lower()
    
    # Write the .env file
    print("\nüíæ Saving configuration...")
    write_env_file(ENV_FILE, env_vars)
    
    # Set proper permissions (Unix/Linux only)
    try:
        os.chmod(ENV_FILE, 0o600)  # Read/write for owner only
        print(f"‚úÖ Set secure permissions on {ENV_FILE}")
    except:
        print("‚ö†Ô∏è  Could not set file permissions (this is normal on Windows)")
    
    print("\n‚úÖ Configuration saved successfully!")
    print(f"üìÑ Environment variables written to: {ENV_FILE}")
    print("\nüîí Security reminders:")
    print("   - Never commit .env to version control")
    print("   - Keep your API keys secret")
    print("   - Rotate keys regularly")
    
    # Test configuration
    print("\nüß™ Testing configuration...")
    try:
        from config import config
        config.validate()
        config.print_status()
    except Exception as e:
        print(f"‚ùå Error testing configuration: {e}")


if __name__ == "__main__":
    main()